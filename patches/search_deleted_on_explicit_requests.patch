=== lib/RT/Tickets_Overlay.pm
==================================================================
--- lib/RT/Tickets_Overlay.pm  (revision 576)
+++ lib/RT/Tickets_Overlay.pm  (local)
@@ -51,6 +51,10 @@
 =begin testing
 
 ok (require RT::Tickets);
+ok( my $testtickets = RT::Tickets->new( $RT::SystemUser ) );
+ok( $testtickets->LimitStatus( VALUE => 'deleted' ) );
+# Should be zero until 'allow_deleted_search'
+ok( $testtickets->Count == 0 );
 
 =end testing
 
@@ -957,6 +961,11 @@
 OPERATOR is one of = or !=.
 VALUE is a status.
 
+RT adds Status != 'deleted' until object has
+allow_deleted_search internal property set.
+$tickets->{'allow_deleted_search'} = 1;
+$tickets->LimitStatus( VALUE => 'deleted' );
+
 =cut
 
 sub LimitStatus {
@@ -1814,7 +1823,8 @@
 	    #TODO we should be doing this in the where clause.
 	    #but you can't do multiple clauses on the same field just yet :/
 
-	    if ($Ticket->__Value('Status') eq 'deleted') {
+	    if ( $Ticket->__Value('Status') eq 'deleted' &&
+			!$self->{'allow_deleted_search'} ) {
 		return($self->Next());
 	    }
             # Since Ticket could be granted with more rights instead
=== lib/RT/Tickets_Overlay_SQL.pm
==================================================================
--- lib/RT/Tickets_Overlay_SQL.pm  (revision 576)
+++ lib/RT/Tickets_Overlay_SQL.pm  (local)
@@ -387,8 +387,12 @@
                          VALUE => 'ticket');
   }
 
-  # We never ever want to show deleted tickets
-  $self->SUPER::Limit(FIELD => 'Status' , OPERATOR => '!=', VALUE => 'deleted');
+  # We don't want deleted tickets unless 'allow_deleted_search' is set
+  unless( $self->{'allow_deleted_search'} ) {
+    $self->SUPER::Limit(FIELD => 'Status',
+                        OPERATOR => '!=',
+                        VALUE => 'deleted');
+  }
 
 
   # set SB's dirty flag
